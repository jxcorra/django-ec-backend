name: Docker Image CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  run_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Installing packages
        run: |
          python -m pip install --upgrade pip
          pip install -r easycar/requirements.txt
      - name: Run api tests
        run: ./easycar/manage.py test cars.tests
        env:
          DJANGO_SETTINGS_MODULE: easycar.test
  build_images:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: run_tests
    steps:
    - uses: actions/checkout@v2
    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag django-ec-backend
    - name: Log in to GitHub Docker Registry
      uses: docker/login-action@v1
      with:
        registry: docker.pkg.github.com
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Add tag
      run: docker tag django-ec-backend docker.pkg.github.com/jxcorra/django-ec-backend/django-ec-backend
    - name: Push new image
      run: docker push docker.pkg.github.com/jxcorra/django-ec-backend/django-ec-backend
  deploy_to_digitalocean:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build_images
    steps:
    - name: Deploy to Digital Ocean droplet via SSH action
      uses: appleboy/ssh-action@v0.1.3
      with:
        HOST: ${{ secrets.HOST }}
        USERNAME: ${{ secrets.USERNAME }}
        KEY: ${{ secrets.KEY }}
        PORT: ${{ secrets.PORT }}
        script: |
          # Stop running containers
          if [[ $(docker ps -q) ]]; then docker stop $(docker ps -q); fi

          # Remove old container
          if [[ $(docker ps -a -q) ]]; then docker rm $(docker ps -a -q); fi

          # Login to Github Container Registry
          docker login docker.pkg.github.com -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}

          # Pull the Docker Image
          docker pull docker.pkg.github.com/jxcorra/django-ec-backend/django-ec-backend:latest

          if [[ ! $(docker network list | grep ec-backend) ]]; then docker network create ec-backend; fi

          # Run postgres container
          docker run -d \
            --name postgres \
            -p 5432:5432 \
            -e POSTGRES_PASSWORD=postgres \
            --network=ec-backend \
            postgres

          # Run a new container from a new image
          docker run -d \
            --restart always \
            -p 8000:8000 \
            --name django-ec-backend \
            --network ec-backend \
            docker.pkg.github.com/jxcorra/django-ec-backend/django-ec-backend:latest